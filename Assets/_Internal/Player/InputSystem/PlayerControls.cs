//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/_Internal/Player/InputSystem/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""76724951-950d-4331-8b04-84996c584292"",
            ""actions"": [
                {
                    ""name"": ""OnMove"",
                    ""type"": ""Value"",
                    ""id"": ""9ba79e08-ade5-40f6-9312-02c924809aa4"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""OnRotate"",
                    ""type"": ""Value"",
                    ""id"": ""c8b27ccc-3252-4d15-b0eb-d24a73f067d4"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""OnJump"",
                    ""type"": ""Button"",
                    ""id"": ""43bd47d7-b8cd-4d7b-b90e-13298cf006c2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OnThrow"",
                    ""type"": ""Button"",
                    ""id"": ""536aad90-34f0-499c-8162-b9fa5c112f52"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""c52647dd-0f13-4f1e-be70-9b614e049295"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnMove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""bb89d22f-3eef-491d-b15d-e1a2b2c0f486"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""0527cbe8-1b65-4ad2-bfe2-0402758ca7c8"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""c38a9347-4609-4520-a985-02c061f31be3"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""88fd5bb1-3311-463d-b045-9a00238fd27a"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""f4d2f0d3-60a3-4b82-976f-d240574acf7c"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnRotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2d9a7b54-71a3-42f9-b4fa-2e8b95167b0d"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnJump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a7502b93-b0f5-47db-9ce0-a9cbb6a4c160"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnThrow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Toggler"",
            ""id"": ""5b9feb7b-7b49-4fc8-961d-6ef961867d40"",
            ""actions"": [
                {
                    ""name"": ""OnToggleControls"",
                    ""type"": ""Button"",
                    ""id"": ""6b0e312a-1ab0-43c4-ab9c-afc2b7f81cfb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OnLockCursor"",
                    ""type"": ""Button"",
                    ""id"": ""02aa67a2-09a8-401d-8dc1-3a34c15c958e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3402a688-09fa-4102-827e-44f5c780e57e"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnToggleControls"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bb1bd71b-af7e-46fa-b7a6-372b8b90adf2"",
                    ""path"": ""<Mouse>/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnLockCursor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_OnMove = m_Player.FindAction("OnMove", throwIfNotFound: true);
        m_Player_OnRotate = m_Player.FindAction("OnRotate", throwIfNotFound: true);
        m_Player_OnJump = m_Player.FindAction("OnJump", throwIfNotFound: true);
        m_Player_OnThrow = m_Player.FindAction("OnThrow", throwIfNotFound: true);
        // Toggler
        m_Toggler = asset.FindActionMap("Toggler", throwIfNotFound: true);
        m_Toggler_OnToggleControls = m_Toggler.FindAction("OnToggleControls", throwIfNotFound: true);
        m_Toggler_OnLockCursor = m_Toggler.FindAction("OnLockCursor", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_OnMove;
    private readonly InputAction m_Player_OnRotate;
    private readonly InputAction m_Player_OnJump;
    private readonly InputAction m_Player_OnThrow;
    public struct PlayerActions
    {
        private @PlayerControls m_Wrapper;
        public PlayerActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @OnMove => m_Wrapper.m_Player_OnMove;
        public InputAction @OnRotate => m_Wrapper.m_Player_OnRotate;
        public InputAction @OnJump => m_Wrapper.m_Player_OnJump;
        public InputAction @OnThrow => m_Wrapper.m_Player_OnThrow;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @OnMove.started += instance.OnOnMove;
            @OnMove.performed += instance.OnOnMove;
            @OnMove.canceled += instance.OnOnMove;
            @OnRotate.started += instance.OnOnRotate;
            @OnRotate.performed += instance.OnOnRotate;
            @OnRotate.canceled += instance.OnOnRotate;
            @OnJump.started += instance.OnOnJump;
            @OnJump.performed += instance.OnOnJump;
            @OnJump.canceled += instance.OnOnJump;
            @OnThrow.started += instance.OnOnThrow;
            @OnThrow.performed += instance.OnOnThrow;
            @OnThrow.canceled += instance.OnOnThrow;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @OnMove.started -= instance.OnOnMove;
            @OnMove.performed -= instance.OnOnMove;
            @OnMove.canceled -= instance.OnOnMove;
            @OnRotate.started -= instance.OnOnRotate;
            @OnRotate.performed -= instance.OnOnRotate;
            @OnRotate.canceled -= instance.OnOnRotate;
            @OnJump.started -= instance.OnOnJump;
            @OnJump.performed -= instance.OnOnJump;
            @OnJump.canceled -= instance.OnOnJump;
            @OnThrow.started -= instance.OnOnThrow;
            @OnThrow.performed -= instance.OnOnThrow;
            @OnThrow.canceled -= instance.OnOnThrow;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // Toggler
    private readonly InputActionMap m_Toggler;
    private List<ITogglerActions> m_TogglerActionsCallbackInterfaces = new List<ITogglerActions>();
    private readonly InputAction m_Toggler_OnToggleControls;
    private readonly InputAction m_Toggler_OnLockCursor;
    public struct TogglerActions
    {
        private @PlayerControls m_Wrapper;
        public TogglerActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @OnToggleControls => m_Wrapper.m_Toggler_OnToggleControls;
        public InputAction @OnLockCursor => m_Wrapper.m_Toggler_OnLockCursor;
        public InputActionMap Get() { return m_Wrapper.m_Toggler; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TogglerActions set) { return set.Get(); }
        public void AddCallbacks(ITogglerActions instance)
        {
            if (instance == null || m_Wrapper.m_TogglerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TogglerActionsCallbackInterfaces.Add(instance);
            @OnToggleControls.started += instance.OnOnToggleControls;
            @OnToggleControls.performed += instance.OnOnToggleControls;
            @OnToggleControls.canceled += instance.OnOnToggleControls;
            @OnLockCursor.started += instance.OnOnLockCursor;
            @OnLockCursor.performed += instance.OnOnLockCursor;
            @OnLockCursor.canceled += instance.OnOnLockCursor;
        }

        private void UnregisterCallbacks(ITogglerActions instance)
        {
            @OnToggleControls.started -= instance.OnOnToggleControls;
            @OnToggleControls.performed -= instance.OnOnToggleControls;
            @OnToggleControls.canceled -= instance.OnOnToggleControls;
            @OnLockCursor.started -= instance.OnOnLockCursor;
            @OnLockCursor.performed -= instance.OnOnLockCursor;
            @OnLockCursor.canceled -= instance.OnOnLockCursor;
        }

        public void RemoveCallbacks(ITogglerActions instance)
        {
            if (m_Wrapper.m_TogglerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITogglerActions instance)
        {
            foreach (var item in m_Wrapper.m_TogglerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TogglerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TogglerActions @Toggler => new TogglerActions(this);
    public interface IPlayerActions
    {
        void OnOnMove(InputAction.CallbackContext context);
        void OnOnRotate(InputAction.CallbackContext context);
        void OnOnJump(InputAction.CallbackContext context);
        void OnOnThrow(InputAction.CallbackContext context);
    }
    public interface ITogglerActions
    {
        void OnOnToggleControls(InputAction.CallbackContext context);
        void OnOnLockCursor(InputAction.CallbackContext context);
    }
}
